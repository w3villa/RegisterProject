<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                    http://www.springframework.org/schema/security 
                    http://www.springframework.org/schema/security/spring-security-3.1.xsd
                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">



	<!-- The <http> block states that we want to use web security (which is 
		applied by Spring Security's filters), with form-based login and access control 
		expressions enabled. The <intercept-url> element says that the whole site 
		("/**" means any request path) is accessible to anyone (the "permitAll" expression). 
		The <authentication-manager> element is being used here to define a list 
		of in-memory users and their passwords and role information, which is convenient 
		for samples and demos. A real world application would more likely use a database, 
		LDAP server or some single sign-on integration. Spring Security supports 
		many other options out of the box. -->
	<http use-expressions="false" auto-config="true"
		access-denied-page="/accessDenied">
		<intercept-url pattern="/welcome*" access="ROLE_USER" />
		<form-login login-page='/login' default-target-url="/welcome"
			authentication-failure-url="/loginfailed" />
		<logout logout-success-url="/login" invalidate-session="true"
			delete-cookies="JSESSIONID" />
		<remember-me key="rememberMeKey" user-service-ref="userDetailsService" />
		<session-management invalid-session-url="/login?error=sessionExpired"
			session-authentication-error-url="/login?error=alreadyLogin" >
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="true" />
		</session-management>

	</http>



	<beans:bean id="authenticationManager"
		class="org.springframework.security.authentication.ProviderManager">
		<beans:property name="providers">
			<beans:list>
				<beans:ref local="daoAuthenticationProvider" />
			</beans:list>
		</beans:property>
	</beans:bean>


	<authentication-manager>
		<authentication-provider user-service-ref="userDetailsService">
			<password-encoder ref="encoder" />
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userDetailsService" />
	</beans:bean>

	<beans:bean id="encoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder" />


	<beans:bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="expiredUrl" value="/session-expired.htm" />
	</beans:bean>

	<beans:bean id="myAuthFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="sessionAuthenticationStrategy"
			ref="sas" />
		<beans:property name="authenticationManager" ref="authenticationManager" />
	</beans:bean>

	<beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
	</beans:bean>

	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

</beans:beans>